#1.Framework for developing a Reacp app
    1. Break the app into components
    2. Build a static version of the app
    3. Determine what should be stateful
    4. Determine in which component each piece of state should live
    5. Hard-code initial states
    6. Add inverse data flow

#2. State criteria
    1. Is it passed in from a parent via props? If so, it probably isn't state.
    2. Does it change over time? If not, it probably isn't state.
        This is a key criterion of stateful data: it changes
    3. Can you compute it based on any other state or props in your component?
        If so, it's not state.
        For simplicity, we want to strive to represent state with as few data points as possible.

#3. Applying the criteria
TimersDashboard
- isOpen boolean for ToggleableTimerForm 
: Stateful. The data is defined here. It changes over time. And it cannot be computed from other state or props.

EditableTimerList
- Timer properties
: Stateful. The data is defined in this compoent, changes over time, and cannot be computed from other state or props.

EditableTimer
- editFormOpen for a given timer
: Stateful. The data is defined in this compoent, changes over time, and cannot be computed from other state or props.

Timer
- Timer properties
: In this context, not stateful. Properties are passed down from the parent.

TimerForm  
We might be tempted to conclude that TimerForm doens't manage any stateful data, as title and project are props 
passed down from the parent. However, as we'll see, forms are special state managers in their own right.
So, outside of TimerForm, we've identified our stateful data:
- The list of timers and properties of each timer
- Whether or not the edit form of a timer is open
- Whether or not the create form is open

#4. Determine in which component each piece of state should live
For each piece of state:
- Identify every component that renders something based on that state
- Find a common owner component (a single component above all the components that need the state in the hierarchy).
- Either the common owner or another component higher up in the hierarchy should own the state.
- If you can't find a component where it makes sense to own the state, create a new component simply for holding the
state and add it somewhere in the hierarch above the common owner component.

In summary, we'll have three pieces of state each in three different components:
- Timer data will be owned and managed by TimersDashboard.
- Each EditableTimer will manage the state of its timer edit form.
- The ToggleableTimerForm will manage the state of its form visibility.

#5. Hard-code initial states (Props & State)
: props are state's immutable accomplice. Props acts as state's one way pipeline.
State is managed in some select parent components and then that data flows down through children as props.
If state is updated, the component managing that state re-renders by calling render().
This, in turn, causes any of its children to re-render as well. And the children of those children.

In React, forms are stateful. All modifications that are made to a component should be handled by React and kept in state.

#6. Add Inverse data flow

Notes.
timerIsRunning={!!this.props.runningSince}
We use !! here to derive the boolean prop timerIsRunning for TimerActionBUtton. 
!! returns false when runningSince is null.


Methodology review
While building our time-logging app, we learned and applied a methodology for building React apps.
Again, those steps were:

1. Break the app into components
	we mapped out the component structure of our app by examining the app's working UI.
	We then applied the single-responsibility principle to break components down so that
	each had minimal viable functinality.

2. Build a static version of the app
	Out bottom-level (user-visble) components rendered HTML based on static props, passed
	down from parents.
3. Determine what should be stateful
	We used a series of questions to deduce what data should be stateful.
	This data was represented in our static app as props.
4. Determine in which component each piece of state should live
    We used another series of questions to determine which component should own each piece of state.
    TimersDashboard owned timer state data and ToggleableTimerForm and EditableTimer both held state
    pertaining to whether or not to render a TimerForm.
5. Hard-code initial states
    We then initialized state-owner's state properties with hard-coded values.
6. Add inverse data flow
    We added interactivity by decorating buttons with onClick handlers. These called functions that 
    were passed in as props down the hierarchy from whichever component owned the relevant state being manipulated.

    REST API
    http://www.andrewhavens.com/posts/20/beginners-guide-to-creating-a-rest-api/

7. Add server comunication.

When Fetch API function is invoked, it fires off the request
to the server and then returns control flow immediately.
The execution of our program does not wait for the server's response.
so, the function is called an asynchronous function.

The success function we pass to getTimers() is called a callback.
We're saying: "When you finally hear back from the server,
if it's a successful response, invoke this function."
This asynchorounous paradigm ensures that excution of our JavaScript
is not blcked by I/O.

A timeline is the best medium for illustrating what happens:
1)  Before initial render
    React initializes the component. state is set to an object with 
    property timers, a blank array, is returned.

2) The initial render
    React then calls render() on TimersDashboard. 
    In order for the render to complete, Editable-TimerList and ToggeableTimerForm 
    - its two children - must be rendered.

3)  Children are rendered
    EditableTimerList has its render method called. Because it was passed a blank data array,
    it simply produces the following HTML output: <div id='timers'></div>
    ToggleableTimerForm renders its HTML, which is the "+" button.

4)  Initial render is finished
    With its children rendered, the initial render of TimersDashboard is finshed and the HTML
    is written to the DOM.

5)  componentDidMount is invoked
    Now that the component is mounted, componentDidMount() is called on TimersDashboard.
    This method calls loadTimersFromServer(). In turn, that function calls client.getTimers().
    That will make the HTTP request to our server, requesting the list of timers.
    When client hears back, it invokes our success function.

    On invocation, the success function is passed one argument, serverTimers. This is the array
    of timers returned by the server. We then call setState(), which will trigger a new render.
    The new render populates our app with EditableTimer children and all of their children.
    The app is fully loaded and at an imperceptibly fast speed for the end user.

Fetch
fetch() accpets two arguments
1. The path to the resource we want to fetch
2. An object of request parameters
By default, Fetch makes a GET request. Fetch returns a promise.
Promise allows to chain .then() statements.
What we're seentially saying here is: "Fetching the timers from /api/timers then check the status
code returned by the server. Then, extract the JavaScript object from the response. Then, pass that 
object to the success function.

At each stage of the pipeline, the result of the previous statement is passed as the argument to the next one:
1. When checkStatus() is invoked, it's passed a Fetch response object that fetch() returns.
2. checkStatus(), after verifying the response, returns the same reponse object.
3. parseJSON() is invoked and passed the response object returned by the checkStatus().
4. parseJSON() returns the JavaScript array of timers returned by the server.
5. success() is invoked with the array of timers returned by parseJSON().

optimistic updating - Updating the client locally before waiting to hear from the server.
                This duplicates our state update efforts, as we perform updates on both 
                the client and the server. But it makes our app as responsive as possible.
                The "optimism" we have here is that the request will succeed and not fail with an error.

